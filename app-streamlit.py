import streamlit as st
import pandas as pd
from google.oauth2 import service_account
from datetime import datetime, timedelta
import plotly.express as px
import os
import gspread 
import logging

# Configuration de l'authentification Google Sheets
@st.cache_resource
def get_google_credentials():
    st.write("üîë Tentative de r√©cup√©ration des credentials Google...")
    try:
        credentials = service_account.Credentials.from_service_account_info(
            st.secrets["gcp_service_account"],
            scopes=['https://www.googleapis.com/auth/spreadsheets.readonly']
        )
        st.write("‚úÖ Credentials Google r√©cup√©r√©es avec succ√®s")
        return credentials
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la r√©cup√©ration des credentials: {str(e)}")
        return None


# Fonction pour lister les fichiers CSV disponibles
def get_available_data_sources():
    st.write("üìÇ Recherche des sources de donn√©es disponibles...")
    
    # Ajout de l'option Google Sheets
    sources = ["Google Sheets (Live)"]
    st.write(f"Sources initiales: {sources}")
    
    # Lecture du dossier data
    data_dir = 'data'
    if os.path.exists(data_dir):
        st.write(f"‚úÖ Dossier {data_dir} trouv√©")
        csv_files = [f for f in os.listdir(data_dir) if f.endswith('.csv')]
        st.write(f"Fichiers CSV trouv√©s: {csv_files}")
        sources.extend([f"Fichier Local: {f}" for f in csv_files])
    else:
        st.write(f"‚ùå Dossier {data_dir} non trouv√©")
    
    st.write(f"Sources finales disponibles: {sources}")
    return sources

# Fonction pour charger les donn√©es depuis Google Sheets
def load_sheets_data():
    st.write("üîÑ D√©but du chargement des donn√©es Google Sheets")
    try:
        # Initialisation de gspread
        gc = gspread.service_account_from_dict(st.secrets["gcp_service_account"])
        sheet = gc.open_by_key("1i8TU3c72YH-5sfAKcxmeuthgSeHcW3-ycg7cwzOtkrE")
        worksheet = sheet.get_worksheet(0)
        
        # R√©cup√©ration des dimensions de la feuille pour validation
        rows = worksheet.row_count
        cols = worksheet.col_count
        st.write(f"üìä Dimensions de la feuille : {rows} lignes x {cols} colonnes")
        
        # R√©cup√©ration de toutes les donn√©es en une seule fois
        st.write("‚ö†Ô∏è R√©cup√©ration des donn√©es brutes...")
        all_values = worksheet.get_all_values()
        st.write(f"üìä Nombre total de lignes r√©cup√©r√©es : {len(all_values)}")
        
        if len(all_values) <= 1:
            st.error("‚ùå Pas assez de donn√©es r√©cup√©r√©es")
            return None
            
        # Cr√©ation du DataFrame avec toutes les donn√©es d'abord
        df_complet = pd.DataFrame(all_values[1:], columns=all_values[0])
        st.write(f"üìä DataFrame initial : {df_complet.shape[0]} lignes x {df_complet.shape[1]} colonnes")
        
        # V√©rification des donn√©es avant filtrage
        st.write("üìã Premi√®res colonnes disponibles :")
        for col in list(df_complet.columns)[:5]:  # Affiche les 5 premi√®res colonnes
            st.write(f"- {col}")
        st.write(f"... et {len(df_complet.columns) - 5} autres colonnes")
        
        # Liste des colonnes n√©cessaires avec v√©rification de leur pr√©sence
        colonnes_necessaires = [
            'Horodateur',
            'Sur une √©chelle de 1 √† 10 , o√π 1 repr√©sente "je ne recommanderais pas du tout" et 10 "Avec enthousiasme", √† quel point √™tes-vous susceptible de conseiller Annette K √† un proche ?',
            'Pourquoi cette note ?',
            'Sur une √©chelle de 1 √† 10, Quelle est la probabilit√© que vous soyez toujours abonn√© chez Annette K. dans 6 mois ?',
            'Pourquoi cette r√©ponse ?',
            "l'exp√©rience √† la salle de sport",
            "l'exp√©rience piscine",
            "La qualit√© des coaching en groupe",
            "la disponibilit√© des cours sur le planning",
            "la disponibilit√© des √©quipements sportifs",
            "les coachs",
            "les maitres nageurs",
            "le personnel d'accueil",
            "Le commercial",
            "l'ambiance g√©n√©rale",
            "la propret√© g√©n√©rale",
            "les vestiaires (douches / sauna/ serviettes..)"
        ]
        
        # V√©rification de l'existence des colonnes avant filtrage
        colonnes_manquantes = [col for col in colonnes_necessaires if col not in df_complet.columns]
        if colonnes_manquantes:
            st.warning("‚ö†Ô∏è Colonnes manquantes dans les donn√©es source :")
            for col in colonnes_manquantes:
                st.write(f"- {col}")
        
        # Filtrage uniquement sur les colonnes existantes
        colonnes_presentes = [col for col in colonnes_necessaires if col in df_complet.columns]
        if not colonnes_presentes:
            st.error("‚ùå Aucune colonne requise n'a √©t√© trouv√©e dans les donn√©es")
            return None
            
        df = df_complet[colonnes_presentes].copy()
        st.write(f"üìä Apr√®s s√©lection des colonnes : {df.shape[0]} lignes x {df.shape[1]} colonnes")
        
        # Conversion des dates avec gestion d'erreurs
        if 'Horodateur' in df.columns:
            try:
                df['Horodateur'] = pd.to_datetime(df['Horodateur'], format='%d/%m/%Y %H:%M:%S')
                st.write("‚úÖ Conversion des dates r√©ussie")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erreur lors de la conversion des dates : {str(e)}")
                st.write("üîç Exemple de valeurs dans Horodateur :", df['Horodateur'].head().tolist())
        
        st.write("‚úÖ Chargement termin√© avec succ√®s")
        return df
        
    except Exception as e:
        st.error(f"‚ùå Erreur lors du chargement : {type(e).__name__} - {str(e)}")
        logger.error(f"Erreur d√©taill√©e : {str(e)}", exc_info=True)
        return None

def main():
    st.title("Dashboard NPS Annette K.")
    
    # S√©lection de la source de donn√©es
    st.write("üöÄ D√©marrage de l'application...")
    available_sources = get_available_data_sources()
    
    st.write("üìå Configuration du s√©lecteur de source...")
    data_source = st.selectbox(
        "Source des donn√©es",
        available_sources,
        help="S√©lectionnez la source des donn√©es √† analyser"
    )
    
    st.write(f"Source s√©lectionn√©e: {data_source}")
    
    # Chargement des donn√©es selon la source s√©lectionn√©e
    if data_source == "Google Sheets (Live)":
        st.write("üîÑ Chargement des donn√©es depuis Google Sheets...")
        df = load_sheets_data()
        if df is None:
            st.error("‚ùå Erreur lors du chargement des donn√©es Google Sheets")
            return
    else:
        # Extraction du nom du fichier
        filename = data_source.replace("Fichier Local: ", "")
        df = load_local_data(filename)
if __name__ == "__main__":
    main()