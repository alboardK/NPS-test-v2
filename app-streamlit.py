import streamlit as st
import pandas as pd
from google.oauth2 import service_account
from datetime import datetime, timedelta
import plotly.express as px
import os
import gspread 

# Configuration de l'authentification Google Sheets
@st.cache_resource
def get_google_credentials():
    st.write("üîë Tentative de r√©cup√©ration des credentials Google...")
    try:
        credentials = service_account.Credentials.from_service_account_info(
            st.secrets["gcp_service_account"],
            scopes=['https://www.googleapis.com/auth/spreadsheets.readonly']
        )
        st.write("‚úÖ Credentials Google r√©cup√©r√©es avec succ√®s")
        return credentials
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la r√©cup√©ration des credentials: {str(e)}")
        return None

# Fonction pour lister les fichiers CSV disponibles
def get_available_data_sources():
    st.write("üìÇ Recherche des sources de donn√©es disponibles...")
    
    # Ajout de l'option Google Sheets
    sources = ["Google Sheets (Live)"]
    st.write(f"Sources initiales: {sources}")
    
    # Lecture du dossier data
    data_dir = 'data'
    if os.path.exists(data_dir):
        st.write(f"‚úÖ Dossier {data_dir} trouv√©")
        csv_files = [f for f in os.listdir(data_dir) if f.endswith('.csv')]
        st.write(f"Fichiers CSV trouv√©s: {csv_files}")
        sources.extend([f"Fichier Local: {f}" for f in csv_files])
    else:
        st.write(f"‚ùå Dossier {data_dir} non trouv√©")
    
    st.write(f"Sources finales disponibles: {sources}")
    return sources

# Fonction pour charger les donn√©es depuis Google Sheets
def load_sheets_data():
    st.write("üîÑ D√©but du chargement des donn√©es Google Sheets")
    try:
        credentials = get_google_credentials()
        if credentials is None:
            st.error("‚ùå √âchec de r√©cup√©ration des credentials")
            return None
            
        st.write("‚úÖ Credentials r√©cup√©r√©es avec succ√®s")
        
        # Utilisation de gspread avec gestion des en-t√™tes dupliqu√©s
        gc = gspread.service_account_from_dict(st.secrets["gcp_service_account"])
        sheet = gc.open_by_key("1i8TU3c72YH-5sfAKcxmeuthgSeHcW3-ycg7cwzOtkrE")
        worksheet = sheet.get_worksheet(0)
        
        # R√©cup√©ration des donn√©es avec gestion des en-t√™tes
        try:
            data = worksheet.get_all_records(expected_headers=[
                'Horodateur',
                'Sur une √©chelle de 1 √† 10 , o√π 1 repr√©sente "je ne recommanderais pas du tout" et 10 "Avec enthousiasme", √† quel point √™tes-vous susceptible de conseiller Annette K √† un proche ?',
                'Pourquoi cette note ?',
                'Sur une √©chelle de 1 √† 10, Quelle est la probabilit√© que vous soyez toujours abonn√© chez Annette K. dans 6 mois ?',
                'Pourquoi cette r√©ponse ?',
                "l'exp√©rience √† la salle de sport",
                "l'exp√©rience piscine",
                "La qualit√© des coaching en groupe",
                "la disponibilit√© des cours sur le planning",
                "la disponibilit√© des √©quipements sportifs",
                "les coachs",
                "les maitres nageurs",
                "le personnel d'accueil",
                "Le commercial",
                "l'ambiance g√©n√©rale",
                "la propret√© g√©n√©rale",
                "les vestiaires (douches / sauna/ serviettes..)"
            ])
        except Exception as e:
            st.write("‚ö†Ô∏è Tentative de r√©cup√©ration alternative des donn√©es...")
            # Si √ßa √©choue, on essaie de r√©cup√©rer toutes les valeurs et de cr√©er le DataFrame manuellement
            values = worksheet.get_all_values()
            headers = values[0]
            data = values[1:]
            df = pd.DataFrame(data, columns=headers)
            return df
            
        df = pd.DataFrame(data)
        st.write("‚úÖ Donn√©es charg√©es avec succ√®s")
        st.write(f"Nombre de colonnes charg√©es: {len(df.columns)}")
        return df
        
    except Exception as e:
        st.error(f"‚ùå Erreur d√©taill√©e: {type(e).__name__} - {str(e)}")
        return None
    

def main():
    st.title("Dashboard NPS Annette K.")
    
    # S√©lection de la source de donn√©es
    st.write("üöÄ D√©marrage de l'application...")
    available_sources = get_available_data_sources()
    
    st.write("üìå Configuration du s√©lecteur de source...")
    data_source = st.selectbox(
        "Source des donn√©es",
        available_sources,
        help="S√©lectionnez la source des donn√©es √† analyser"
    )
    
    st.write(f"Source s√©lectionn√©e: {data_source}")
    
    # Chargement des donn√©es selon la source s√©lectionn√©e
    if data_source == "Google Sheets (Live)":
        st.write("üîÑ Chargement des donn√©es depuis Google Sheets...")
        df = load_sheets_data()
        if df is None:
            st.error("‚ùå Erreur lors du chargement des donn√©es Google Sheets")
            return
    else:
        # Extraction du nom du fichier
        filename = data_source.replace("Fichier Local: ", "")
        df = load_local_data(filename)
if __name__ == "__main__":
    main()